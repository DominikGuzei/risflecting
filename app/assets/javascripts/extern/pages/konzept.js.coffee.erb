#= require vendor/jquery.hashchange

UrlHash = 
  getChapter: -> 
    hash = location.hash
    chapterNumberString = hash.substring(hash.indexOf('-') + 1)
    parseInt(chapterNumberString)
    
  setChapter: (chapterNumber) -> location.hash = "chapter-#{chapterNumber}"

class ChaptersController
  links: null
  chapters: null
  previousChapterButton: null
  nextChapterButton: null
  
  currentChapter: 0
  
  activeLink: null
  activeChapter: null
  
  constructor: (options) ->
    @links = options.links
    @chapters = options.chapters
    @previousChapterButton = options.previousChapterButton
    @nextChapterButton = options.nextChapterButton
    
    @activateChapter(options.startChapter)
  
  activateChapter: (chapterNumber) ->
    chapterNumber = 1 if isNaN chapterNumber
    
    @activeLink.removeClass('active') if @activeLink
    @activeChapter.removeClass('active') if @activeChapter
    
    @activeLink = @links.eq(chapterNumber - 1).addClass('active')
    @activeChapter = @chapters.eq(chapterNumber - 1).addClass('active')
    
    @currentChapter = chapterNumber
    
    @renderPagingButtons(chapterNumber)
    
  renderPagingButtons: (chapterNumber) ->
    totalChapters = @chapters.length
    
    if @currentChapter > 1 
      @previousChapterButton.show()
      @previousChapterButton.attr('href', "#chapter-#{@currentChapter-1}")
    else 
      @previousChapterButton.hide()
    
    if @currentChapter < totalChapters 
      @nextChapterButton.show()
      @nextChapterButton.attr('href', "#chapter-#{@currentChapter+1}")
    else @nextChapterButton.hide()

jQuery ->
  
  chaptersController = new ChaptersController 
    links: $('#article-navigation li') 
    chapters: $('article section')
    startChapter: UrlHash.getChapter()
    previousChapterButton: $('#previous-chapter-button')
    nextChapterButton: $('#next-chapter-button')
  
  $(window).hashchange -> chaptersController.activateChapter UrlHash.getChapter()